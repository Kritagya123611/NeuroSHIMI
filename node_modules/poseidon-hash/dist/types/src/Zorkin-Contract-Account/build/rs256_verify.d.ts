declare const _default: "#pragma version 10\n\nzorkin_contract_account.contracts.rs256_verify.rs256_verify:\n    // zorkin_contract_account/contracts/rs256_verify.py:15-16\n    // # HASH_DER_OID_SHA256: Bytes = Bytes.from_hex(HASH_DER_OID_SHA256_HEX)\n    // input_data_from_notes: Bytes = aggregate_gtxn_notes()\n    callsub aggregate_gtxn_notes\n    // zorkin_contract_account/contracts/rs256_verify.py:24\n    // contract_account_params.issuer_public_key.bytes\n    dup\n    int 106\n    extract_uint16\n    swap\n    dup\n    int 108\n    extract_uint16\n    dig 1\n    dig 3\n    dig 2\n    substring3\n    // zorkin_contract_account/contracts/rs256_verify.py:22-25\n    // # Validate issuer public key is authentic\n    // issuer_public_key: Bytes = decode_dynamic_bytes(\n    //     contract_account_params.issuer_public_key.bytes\n    // )\n    callsub decode_dynamic_bytes\n    pop\n    // zorkin_contract_account/contracts/rs256_verify.py:27\n    // contract_account_params.issuer_rs256_exponent.bytes\n    dig 1\n    int 110\n    extract_uint16\n    dig 2\n    cover 2\n    substring3\n    // zorkin_contract_account/contracts/rs256_verify.py:26-28\n    // issuer_rs256_exponent: Bytes = decode_dynamic_bytes(\n    //     contract_account_params.issuer_rs256_exponent.bytes\n    // )\n    callsub decode_dynamic_bytes\n    pop\n    // zorkin_contract_account/contracts/rs256_verify.py:30\n    // contract_account_params.issuer_signature.bytes\n    dup\n    int 104\n    extract_uint16\n    uncover 2\n    substring3\n    // zorkin_contract_account/contracts/rs256_verify.py:29-31\n    // issuer_signature: Bytes = decode_dynamic_bytes(\n    //     contract_account_params.issuer_signature.bytes\n    // )\n    callsub decode_dynamic_bytes\n    pop\n    // zorkin_contract_account/contracts/rs256_verify.py:32-33\n    // # TODO: utilise new bmodexp opcode when available to efficiently implement RSA.\n    // return True\n    int 1\n    return\n\n\n// zorkin_contract_account.common.aggregate_gtxn_notes() -> bytes:\naggregate_gtxn_notes:\n    // zorkin_contract_account/common.py:165-166\n    // @subroutine\n    // def aggregate_gtxn_notes() -> Bytes:\n    proto 0 1\n    // zorkin_contract_account/common.py:167\n    // data: Bytes = Bytes(b\"\")\n    byte 0x\n    // zorkin_contract_account/common.py:168\n    // group_size: UInt64 = Global.group_size\n    global GroupSize\n    // zorkin_contract_account/common.py:169\n    // for i in urange(group_size):\n    int 0\n\naggregate_gtxn_notes_for_header@1:\n    // zorkin_contract_account/common.py:169\n    // for i in urange(group_size):\n    frame_dig 2\n    frame_dig 1\n    <\n    bz aggregate_gtxn_notes_after_for@4\n    // zorkin_contract_account/common.py:170\n    // note: Bytes = gtxn.Transaction(i).note\n    frame_dig 2\n    dup\n    gtxns Note\n    // zorkin_contract_account/common.py:171\n    // data += note\n    frame_dig 0\n    swap\n    concat\n    frame_bury 0\n    // zorkin_contract_account/common.py:169\n    // for i in urange(group_size):\n    int 1\n    +\n    frame_bury 2\n    b aggregate_gtxn_notes_for_header@1\n\naggregate_gtxn_notes_after_for@4:\n    // zorkin_contract_account/common.py:172\n    // return data\n    retsub\n\n\n// zorkin_contract_account.common.decode_dynamic_bytes(value: bytes) -> bytes:\ndecode_dynamic_bytes:\n    // zorkin_contract_account/common.py:83-84\n    // @subroutine\n    // def decode_dynamic_bytes(value: Bytes) -> Bytes:\n    proto 1 1\n    // zorkin_contract_account/common.py:85\n    // return substring(value, 2, value.length)\n    frame_dig -1\n    len\n    frame_dig -1\n    int 2\n    uncover 2\n    substring3\n    retsub\n";
export default _default;
//# sourceMappingURL=rs256_verify.d.ts.map