declare const _default: "#pragma version 10\n\nzorkin_contract_account.contracts.contract_account.contract_account:\n    // zorkin_contract_account/contracts/contract_account.py:34-35\n    // # Address identifier\n    // address_seed: Bytes = TemplateVar[Bytes](\"ADDR\")\n    byte TMPL_ADDR\n    // zorkin_contract_account/contracts/contract_account.py:36\n    // session_pk: Bytes = TemplateVar[Bytes](\"EPK\")\n    byte TMPL_EPK\n    dup\n    // zorkin_contract_account/contracts/contract_account.py:34-35\n    // # Address identifier\n    // address_seed: Bytes = TemplateVar[Bytes](\"ADDR\")\n    byte TMPL_ADDR\n    // zorkin_contract_account/contracts/contract_account.py:38-39\n    // # Unpack the input\n    // is_authorizing_new_session: bool = btoi(arg(0)) == 1\n    arg 0\n    btoi\n    int 1\n    ==\n    cover 2\n    // zorkin_contract_account/contracts/contract_account.py:40\n    // tx_sig_with_session_sk: Bytes = arg(1)\n    arg 1\n    cover 3\n    // zorkin_contract_account/contracts/contract_account.py:42-43\n    // # Input sanity check\n    // assert address_seed.length == 32\n    len\n    int 32\n    ==\n    assert\n    // zorkin_contract_account/contracts/contract_account.py:44\n    // assert session_pk.length == 32\n    len\n    int 32\n    ==\n    assert\n    // zorkin_contract_account/contracts/contract_account.py:46\n    // if is_authorizing_new_session:\n    bz main_else_body@2\n    // zorkin_contract_account/contracts/contract_account.py:47\n    // _assert_valid_reauthorization(address_seed, tx_sig_with_session_sk)\n    dig 2\n    swap\n    callsub _assert_valid_reauthorization\n    b main_after_if_else@3\n\nmain_else_body@2:\n    // zorkin_contract_account/contracts/contract_account.py:49\n    // _assert_valid_session(tx_sig_with_session_sk, session_pk)\n    dig 1\n    callsub _assert_valid_session\n\nmain_after_if_else@3:\n    // zorkin_contract_account/contracts/contract_account.py:51\n    // return True\n    int 1\n    return\n\n\n// zorkin_contract_account.contracts.contract_account._assert_valid_reauthorization(address_seed: bytes, tx_sig_with_session_sk: bytes) -> void:\n_assert_valid_reauthorization:\n    // zorkin_contract_account/contracts/contract_account.py:54-60\n    // ##\n    // # Helper\n    // ##\n    // @subroutine\n    // def _assert_valid_reauthorization(\n    //     address_seed: Bytes, tx_sig_with_session_sk: Bytes\n    // ) -> None:\n    proto 2 0\n    // zorkin_contract_account/contracts/contract_account.py:61\n    // tenant_auth_app_id = TemplateVar[Application](\"TENANT_AUTH_APP_ID\")\n    int TMPL_TENANT_AUTH_APP_ID\n    // zorkin_contract_account/contracts/contract_account.py:62-64\n    // # Assert Group as Expected\n    // # @TODO: Link with other transactions in the group, to ensure atomically secure\n    // tenant_auth_authorize_appl = gtxn.ApplicationCallTransaction(0)\n    int 0\n    gtxns TypeEnum\n    int appl\n    ==\n    assert // transaction type is appl\n    int 0\n    // zorkin_contract_account/contracts/contract_account.py:65-67\n    // # assert Global.group_size == 6\n    // # @TODO: verify it's actually the specific call\n    // assert tenant_auth_authorize_appl.app_id == tenant_auth_app_id\n    gtxns ApplicationID\n    ==\n    assert\n    // zorkin_contract_account/contracts/contract_account.py:73-74\n    // # Assert proof inputs correspond\n    // input_data_from_notes: Bytes = aggregate_gtxn_notes()\n    callsub aggregate_gtxn_notes\n    // zorkin_contract_account/contracts/contract_account.py:79\n    // contract_account_params.jwt_contents_public_input.bytes\n    dup\n    int 110\n    extract_uint16\n    swap\n    dup\n    int 112\n    extract_uint16\n    dig 1\n    uncover 3\n    uncover 2\n    substring3\n    // zorkin_contract_account/contracts/contract_account.py:78-80\n    // public_input: Bytes = decode_dynamic_bytes(\n    //     contract_account_params.jwt_contents_public_input.bytes\n    // )\n    callsub decode_dynamic_bytes\n    swap\n    // zorkin_contract_account/contracts/contract_account.py:83\n    // new_authorizing_session_pk: Bytes = contract_account_params.session_pk.bytes\n    dup\n    extract 0 32 // on error: Index access is out of bounds\n    swap\n    // zorkin_contract_account/contracts/contract_account.py:84\n    // exp_validity_rounds: Bytes = contract_account_params.exp_validity_rounds.bytes\n    dup\n    extract 64 8 // on error: Index access is out of bounds\n    // zorkin_contract_account/contracts/contract_account.py:85\n    // nonce_preimage: Bytes = concat(new_authorizing_session_pk, exp_validity_rounds)\n    uncover 2\n    swap\n    concat\n    cover 2\n    // zorkin_contract_account/contracts/contract_account.py:88\n    // public_inputs.iss_mimc_hash.bytes\n    dig 1\n    extract 64 32 // on error: Index access is out of bounds\n    // zorkin_contract_account/contracts/contract_account.py:87-89\n    // iss_mimc_hash: Bytes = get_value_from_bytes_mod_bn254_r(\n    //     public_inputs.iss_mimc_hash.bytes\n    // )\n    callsub get_value_from_bytes_mod_bn254_r\n    swap\n    // zorkin_contract_account/contracts/contract_account.py:91\n    // public_inputs.sub_poseidon_hash.bytes\n    dig 2\n    extract 0 32 // on error: Index access is out of bounds\n    // zorkin_contract_account/contracts/contract_account.py:90-92\n    // sub_poseidon_hash: Bytes = get_value_from_bytes_mod_bn254_r(\n    //     public_inputs.sub_poseidon_hash.bytes\n    // )\n    callsub get_value_from_bytes_mod_bn254_r\n    // zorkin_contract_account/contracts/contract_account.py:93\n    // client_id: Bytes = contract_account_params.client_id.bytes\n    swap\n    extract 32 32 // on error: Index access is out of bounds\n    // zorkin_contract_account/contracts/contract_account.py:94-96\n    // address_seed_from_public_input: Bytes = get_address_seed(\n    //     iss_mimc_hash, sub_poseidon_hash, client_id\n    // )\n    callsub get_address_seed\n    swap\n    // zorkin_contract_account/contracts/contract_account.py:98-99\n    // # Extract and convert to BigUInt for comparison\n    // public_nonce: Bytes = get_value_from_bytes_mod_bn254_r(public_inputs.nonce.bytes)\n    extract 32 32 // on error: Index access is out of bounds\n    callsub get_value_from_bytes_mod_bn254_r\n    // zorkin_contract_account/contracts/contract_account.py:100\n    // expected_nonce: Bytes = get_value_from_bytes_mod_bn254_r(sha256(nonce_preimage))\n    uncover 2\n    sha256\n    callsub get_value_from_bytes_mod_bn254_r\n    // zorkin_contract_account/contracts/contract_account.py:101-102\n    // # Ensure that the inputs are modulo the prime as required for ZK-SNARK proof verification\n    // assert public_nonce == expected_nonce, \"Nonce must match that of the public input\"\n    ==\n    assert // Nonce must match that of the public input\n    // zorkin_contract_account/contracts/contract_account.py:104\n    // address_seed == address_seed_from_public_input\n    frame_dig -2\n    ==\n    // zorkin_contract_account/contracts/contract_account.py:103-105\n    // assert (\n    //     address_seed == address_seed_from_public_input\n    // ), \"Address seed must match that derived from the public input\"\n    assert // Address seed must match that derived from the public input\n    retsub\n\n\n// zorkin_contract_account.common.aggregate_gtxn_notes() -> bytes:\naggregate_gtxn_notes:\n    // zorkin_contract_account/common.py:165-166\n    // @subroutine\n    // def aggregate_gtxn_notes() -> Bytes:\n    proto 0 1\n    // zorkin_contract_account/common.py:167\n    // data: Bytes = Bytes(b\"\")\n    byte 0x\n    // zorkin_contract_account/common.py:168\n    // group_size: UInt64 = Global.group_size\n    global GroupSize\n    // zorkin_contract_account/common.py:169\n    // for i in urange(group_size):\n    int 0\n\naggregate_gtxn_notes_for_header@1:\n    // zorkin_contract_account/common.py:169\n    // for i in urange(group_size):\n    frame_dig 2\n    frame_dig 1\n    <\n    bz aggregate_gtxn_notes_after_for@4\n    // zorkin_contract_account/common.py:170\n    // note: Bytes = gtxn.Transaction(i).note\n    frame_dig 2\n    dup\n    gtxns Note\n    // zorkin_contract_account/common.py:171\n    // data += note\n    frame_dig 0\n    swap\n    concat\n    frame_bury 0\n    // zorkin_contract_account/common.py:169\n    // for i in urange(group_size):\n    int 1\n    +\n    frame_bury 2\n    b aggregate_gtxn_notes_for_header@1\n\naggregate_gtxn_notes_after_for@4:\n    // zorkin_contract_account/common.py:172\n    // return data\n    retsub\n\n\n// zorkin_contract_account.common.decode_dynamic_bytes(value: bytes) -> bytes:\ndecode_dynamic_bytes:\n    // zorkin_contract_account/common.py:83-84\n    // @subroutine\n    // def decode_dynamic_bytes(value: Bytes) -> Bytes:\n    proto 1 1\n    // zorkin_contract_account/common.py:85\n    // return substring(value, 2, value.length)\n    frame_dig -1\n    len\n    frame_dig -1\n    int 2\n    uncover 2\n    substring3\n    retsub\n\n\n// zorkin_contract_account.common.get_value_from_bytes_mod_bn254_r(bytes_value: bytes) -> bytes:\nget_value_from_bytes_mod_bn254_r:\n    // zorkin_contract_account/common.py:112-113\n    // @subroutine\n    // def get_value_from_bytes_mod_bn254_r(bytes_value: Bytes) -> Bytes:\n    proto 1 1\n    // zorkin_contract_account/common.py:114\n    // assert bytes_value.length <= 32, \"Must be at most 256 bits\"\n    frame_dig -1\n    len\n    int 32\n    <=\n    assert // Must be at most 256 bits\n    // zorkin_contract_account/common.py:117\n    // value %= b254_r_prime\n    frame_dig -1\n    // zorkin_contract_account/common.py:116\n    // b254_r_prime: BigUInt = BigUInt(B254_R_PRIME)\n    byte 0x30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001\n    // zorkin_contract_account/common.py:117\n    // value %= b254_r_prime\n    b%\n    // zorkin_contract_account/common.py:118-119\n    // # Pad to be 32 length, with padding on the left\n    // value_bytes_padded_width32: Bytes = pad(value.bytes, UInt64(32))\n    int 32\n    callsub pad\n    // zorkin_contract_account/common.py:120\n    // return value_bytes_padded_width32\n    retsub\n\n\n// zorkin_contract_account.common.pad(value: bytes, width: uint64) -> bytes:\npad:\n    // zorkin_contract_account/common.py:88-89\n    // @subroutine\n    // def pad(value: Bytes, width: UInt64) -> Bytes:\n    proto 2 1\n    // zorkin_contract_account/common.py:90\n    // assert value.length <= width, \"Width must be wider than value\"\n    frame_dig -2\n    len\n    dupn 2\n    frame_dig -1\n    <=\n    assert // Width must be wider than value\n    // zorkin_contract_account/common.py:91\n    // if value.length == width:\n    frame_dig -1\n    ==\n    bz pad_after_if_else@2\n    // zorkin_contract_account/common.py:92\n    // return value\n    frame_dig -2\n    swap\n    retsub\n\npad_after_if_else@2:\n    // zorkin_contract_account/common.py:93\n    // pad_length: UInt64 = width - value.length\n    frame_dig -1\n    frame_dig 0\n    -\n    // zorkin_contract_account/common.py:94\n    // padding: Bytes = bzero(pad_length)\n    bzero\n    // zorkin_contract_account/common.py:95\n    // padded: Bytes = concat(padding, value)\n    frame_dig -2\n    concat\n    // zorkin_contract_account/common.py:96\n    // return padded\n    swap\n    retsub\n\n\n// zorkin_contract_account.common.get_address_seed(iss_mimc_hash: bytes, sub_poseidon_hash: bytes, client_id: bytes) -> bytes:\nget_address_seed:\n    // zorkin_contract_account/common.py:199-202\n    // @subroutine\n    // def get_address_seed(\n    //     iss_mimc_hash: Bytes, sub_poseidon_hash: Bytes, client_id: Bytes\n    // ) -> Bytes:\n    proto 3 1\n    // zorkin_contract_account/common.py:204\n    // concat(concat(iss_mimc_hash, sub_poseidon_hash), client_id)\n    frame_dig -3\n    frame_dig -2\n    concat\n    frame_dig -1\n    concat\n    // zorkin_contract_account/common.py:203-205\n    // address_seed: Bytes = sha256(\n    //     concat(concat(iss_mimc_hash, sub_poseidon_hash), client_id)\n    // )\n    sha256\n    // zorkin_contract_account/common.py:206\n    // return address_seed\n    retsub\n\n\n// zorkin_contract_account.contracts.contract_account._assert_valid_session(tx_sig_with_session_sk: bytes, session_pk: bytes) -> void:\n_assert_valid_session:\n    // zorkin_contract_account/contracts/contract_account.py:108-109\n    // @subroutine\n    // def _assert_valid_session(tx_sig_with_session_sk: Bytes, session_pk: Bytes) -> None:\n    proto 2 0\n    // zorkin_contract_account/contracts/contract_account.py:110\n    // assert ed25519verify_bare(Txn.tx_id, tx_sig_with_session_sk, session_pk)\n    txn TxID\n    frame_dig -2\n    frame_dig -1\n    ed25519verify_bare\n    assert\n    retsub\n";
export default _default;
//# sourceMappingURL=contract_account.d.ts.map