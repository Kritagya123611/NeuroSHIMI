export declare function bytesToString(bytes: Uint8Array): string;
export declare function intToBytes(v: string | undefined): Uint8Array;
export declare function stringToBytes(str: string): Uint8Array;
export declare function Uint8ArrayToCharArray(a: Uint8Array): string[];
export declare function bigIntToChunkedBytes(num: bigint, bytesPerChunk: number, numChunks: number): string[];
export declare function bigintToArray(n: number, k: number, x: bigint): string[];
export declare function rightPad(arr: Uint8Array, width?: number): {
    length: number;
    padded: Uint8Array;
};
export declare function leftPad(arr: Uint8Array, width?: number): {
    length: number;
    padded: Uint8Array;
};
export declare function leftPadAsMultiple(arr: Uint8Array, multiple?: number): {
    length: number;
    padded: Uint8Array;
};
export declare function int64toBytes(num: number): Uint8Array;
export declare function int8toBytes(num: number): Uint8Array;
export declare function mergeUInt8Arrays(a1: Uint8Array, a2: Uint8Array): Uint8Array;
export declare function chunks(input: Uint8Array, size: number): Uint8Array[];
export declare function getValueAsStringFromJWTClaims(key: string, jwt: string): string;
export declare function getValueFromJWTClaimsAsPoseidonHash(key: string, jwt: string): bigint;
export declare function getValueFromJWTClaimsAsMimcHash(key: string, jwt: string): bigint;
export declare function valueToCircuitCompatibleMimcHash(bytes: Uint8Array | Buffer, circuitFieldWidth: number): bigint;
export declare function generateRandomSeed(): Uint8Array;
export declare function base64ToBase64url(base64: string): string;
export declare function bufferToBase64url(buffer: Uint8Array | ArrayBuffer): string;
//# sourceMappingURL=bytes-util.d.ts.map